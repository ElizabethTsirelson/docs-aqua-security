---
title: Enable App Scanning
owner: Partners
---

## <a id="image-scanning"></a> Image Vulnerability Scanning
This section describes Aqua image vulnerability scanning.

Aqua provides security analysis for PCF Applications at build-time, docker images at build time, and docker images in various storage repositories. The platform then assigns access control policies on these images when used in your environments. Aqua scans images for CVEs (Common Vulnerabilities and Exposures) listed on the NVD web site, a U.S. government repository of standards-based vulnerability management data as well as data from other industry sources which is curated by Aqua Security research staff.
It is crucial to scan images and repositories for known vulnerabilities that could impact the system information assurance and security leading to security risks. Scanning an image for vulnerabilities reduces these incidents, and makes you more aware of the known and defined vulnerable images in the system.

Each image is scanned for vulnerabilities when both its OS packages and development language files are supported as listed in the Support matrix below.

The image scanning process is initiated by:

* Performing a `CF push`
* A build pipeline tool like Consourse or Jenkins
* Integrating the Aqua Management Console with either a public image registry like Docker Hub, or with a private image registry (for more information, see [Add a Registry]) and then adding images from a repository in that registry, see [Repository Management])
* Scheduling a container scan after adding a Registry

During this process, Aqua scans selected images from the registry and issues alerts when detecting vulnerabilities. You can then view the scan results by clicking on a repository to view vulnerability scan details of its images, as described in View Scan Results section below.



## <a id="decorator"></a>Aqua Decorator Buildpack
Build-time vulnerabilty scanning of PCF apps is achived via the aquasec-decorator buildpack which is installed by an errand upon tile installation.
The decorator will be triggered if the `AQUA_SERVER_URL` envrionment variable is set for an app during staging.
To function properly, the Aqua microscanner (invoked by the the decorator) will require  `AQUA_USERNAME` and `AQUA_PASSWORD` to be set.
Aqua recommends implementing a `staging-environment-variable-group` variable so as to not impact developers current environment settings.

### <a id="registry-naming"></a> Blobstore (Registry) naming conventions
There are 2 ways of mapping a PCF application to an Aqua registry entry:


1. Specifying the registry name using the `AQUA_REGISTRY` environment variable.
2. Dynamically generating the registry name based on the PCF space name and first 8 characters of the space guid.

### <a id="image-naming"></a> Image naming convention
PCF application scan results will be registered within a registry using the app name and the first 8 characters of the application version.

## <a id="registry-creation"></a>Aqua registry creation
In order to to register the scan results an Aqua Registry listing needs to exist.
The decorator is able to create these registries on demand, if the Aqua username used for scanning has admin permissions. If not scanning with an admin user the registry or registries need to be created beforehand either via REST API or manually.

| registry | static | dynamic pre-seeded | dynamic on the fly |
|---|---|---|---|
| admin user | X | X | X |
| scanner user | X | X* | - |

<p class='note'><strong>*</strong> Given that spaces and registries stay in sync, by rerunning seed steps everytime a space is created</p>

### <a id="creating-static-registry"></a>Creating a registory via script
With the following commands a registry of the Dummy type will be created via the Aqua API. Make sure to first install [jq](https://stedolan.github.io/jq/download/) and [curl](https://curl.haxx.se/docs/install.html).

<pre class="terminal">
$ export AQUA_USERNAME=pcf-scanner
$ export AQUA_PASSWORD=password set in console
$ export AQUA_SERVER_URL=http://aquasec.[system_domain]
$ export AQUA_REGISTRY=example
$ data=$(jq -n -c --arg registry "${AQUA_REGISTRY}" '{name: $registry, type: "API"}')
$ curl -s -X POST -d "${data}" -H "Content-Type: application/json" -u "${AQUA_USERNAME}:${AQUA_PASSWORD}" \
    ${AQUA_SERVER_URL%/}/api/v1/registries
</pre>




### <a id="seed-registry"></a>Pre-seed registries
With the following commands a registry of the Dummy type will be created, for each PCF space, via the Aqua API. Make sure to first install [jq](https://stedolan.github.io/jq/download/), [curl](https://curl.haxx.se/docs/install.html) and [cf cli](https://docs.cloudfoundry.org/cf-cli/install-go-cli.html). Also login as an PCF admin with `cf login`.

<pre class="terminal">
$ export AQUA_USERNAME=administrator
$ export AQUA_PASSWORD=# password from credentials tab in opsmanager
$ export AQUA_SERVER_URL=http://aquasec.[system_domain]
$ for registry in $(cf curl /v2/spaces | jq -c '.resources[] | {name: "\(.entity.name)-\(.metadata.guid | split("-") | .[0])", type: "API"}'); do
    curl -s -X POST -d "${registry}" -H "Content-Type: application/json" -u "${AQUA_USERNAME}:${AQUA_PASSWORD}" ${AQUA_SERVER_URL%/}/api/v1/registries
  done
</pre>

<p class='note'><strong>Note:</strong> If spaces in your environment change often, it is recommended to run the above snippet on a schedule via an automation tool like Concourse or Jenkins.</p>

## <a id="staging-environment-variable-group"></a> Enable Aqua Decorator for all apps
Security scanning can be enabled globally by using the staging environment variable group.
All apps will use the same Aqua user and password. Environment variables set via a staging envrionment variable group, will be visable to all app developers (via `cf env {app_name}`).

With the following commands the `AQUA_USERNAME`, `AQUA_PASSWORD` and `AQUA_SERVER_URL` environment variables will be set for all PCF apps during staging. Make sure to first install [jq](https://stedolan.github.io/jq/download/) and [cf cli](https://docs.cloudfoundry.org/cf-cli/install-go-cli.html). Also login as an PCF admin with `cf login`.

<pre class="terminal">
$ cf set-staging-environment-variable-group '{"AQUA_REGISTRY":"PIE23","AQUA_USERNAME":"pcf-scanner","AQUA_PASSWORD":"abc12345","AQUA_SERVER_URL":"http://2.3.4.5:8080"}'
</pre>

Alternativly the same setting with a scripted example:

<pre class="terminal">
$ export AQUA_USERNAME=pcf-scanner
$ export AQUA_PASSWORD=# password from Aqua console
$ export AQUA_SERVER_URL=http://aquasec.[system_domain]

$ cf set-staging-environment-variable-group \
  $(cf curl /v2/config/environment_variable_groups/staging | \
    jq -c --arg user "$AQUA_USERNAME" --arg pass "$AQUA_PASSWORD" --arg url "$AQUA_SERVER_URL" \
    '.AQUA_USERNAME = $user | .AQUA_PASSWORD = $pass | .AQUA_SERVER_URL = $url')
</pre>

 To verify the setting was assigned properly run:

<pre class="terminal">
$ cf staging-environment-variable-group
</pre>

## <a id="app-env"></a> Enable Aqua Decorator for single app
With the following commands the `AQUA_USERNAME`, `AQUA_PASSWORD` and `AQUA_SERVER_URL` environment variables will be set for a single PCF app, after which the app will be restaged. Make sure to first install [cf cli](https://docs.cloudfoundry.org/cf-cli/install-go-cli.html). Also login as a developer with `cf login`.

<pre class="terminal">
$ cf set-env {APP_NAME} AQUA_USERNAME administrator
$ cf set-env {APP_NAME} AQUA_PASSWORD {AQUA_PASSWORD}
$ cf set-env {APP_NAME} AQUA_SERVER_URL http://aquasec.[system_domain]
$ cf set-env {APP_NAME} AQUA_REGISTRY example # optional
$ cf restage {APP_NAME}
</pre>
